@using WebApplication_MVC_Task1.ViewModel
@model CategoryVM
@section Title {Categories}
@section SubTitle {
	@(Model?.Id == null ? "Create" : "Edit")
}

<form asp-controller="Categories">
	<div class="card-body">
		<div class="form-group">
			<label asp-for="Name">Name</label>
			<input type="text" class="form-control" asp-for="Name" />
			<span asp-validation-for="Name" class="text-danger" ></span>
		</div>
	</div>
	<div class="card-footer">
		<button type="submit" class="btn btn-primary js-AddUpdate">
			@(Model?.Id == null ? "Add" : "Update")
		</button>
	</div>
</form>





<script>
	document.addEventListener("DOMContentLoaded", function () {
		document.querySelectorAll(".js-AddUpdate").forEach((btn) => {
			btn.addEventListener("click", async (e) => {
				e.preventDefault(); // Prevent default form submission

				Swal.fire({
					title: "Are you sure?",
					text: "You are about to @(Model?.Id == null ? "Add" : "Update") this category!",
					icon: "warning",
					showCancelButton: true,
					confirmButtonColor: "#3085d6",
					cancelButtonColor: "#d33",
					confirmButtonText: "Yes, @(Model?.Id == null ? "Add" : "Update") it!"
				}).then(async (result) => {
					if (result.isConfirmed) {
						const form = btn.closest("form");
						const formData = new FormData(form);
						const response = await fetch(form.action, {
							method: 'POST',
							body: formData
						});

						if (response.ok) {
							Swal.fire({
								icon: 'success',
								title: 'Category @(Model?.Id == null ? "added" : "updated") successfully',
								showConfirmButton: false,
								timer: 3000
							}).then(() => {
								window.location.href = "/Categories/Index"; // Redirect after success
							});
						} else {
							Swal.fire({
								icon: 'error',
								title: 'Error',
								text: 'There was an error @(Model?.Id == null ? "adding" : "updating") the category.',
							});
						}
					}
				});
			});
		});
	});
</script>

